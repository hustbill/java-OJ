package math;

public class MoveZeroes {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// int[] nums = { 0, 1, 0, 0, 12, 0, 24};
		 int[] nums = {0, 1, 0, 3, 5}; // [0,1,0,3,12]
		// int[] nums = {1, 0};
		 //int[] nums = { 2, 1 };


		int[] test1 = { -959151711, 623836953, 209446690, -1950418142, 1339915067, -733626417, 481171539, -2125997010,
				-1225423476, 1462109565, 147434687, -1800073781, -1431212205, -450443973, 50097298, 753533734,
				-747189404, -2070885638, -1484353894, -340296594, -2133744570, 619639811, -1626162038, 669689561,
				112220218, 502447212, -787793179, -726846372, -1611013491, 204107194, 1605165582, -566891128,
				2082852116, 532995238, -1502590712, 2136989777, -2031153343, 371398938, -1907397429, 342796391,
				609166045, -2007448660, -1096076344, -323570318, -2082980371, 2129956379, -243553361, -1549960929,
				1502383415, -1394618779, 694799815, 78595689, -1439173023, -1416578800, 685225786, -333502212,
				-1181308536, -380569313, 772035354, -915266376, 663709718, 1443496021, -777017729, -883300731,
				-387828385, 1907473488, -725483724, -972961871, -1255712537, 383120918, 1383877998, 1722751914,
				-1156050682, 1952527902, -560244497, 1304305692, 1173974542, -1313227247, -201476579, -298899493,
				-1828496581, -1724396350, 1933643204, 1531804925, 1728655262, -955565449, -69843702, -461760848,
				268336768, 1446130876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

		};
		int[] test2 = { -959151711, 623836953, 209446690, -1950418142, 1339915067, -733626417, 481171539, -2125997010,
				-1225423476, 1462109565, 147434687, -1800073781, -1431212205, -450443973, 50097298, 753533734,
				-747189404, -2070885638, -340296594, -1484353894, 619639811, -2133744570, 669689561, -1626162038,
				112220218, 502447212, -787793179, -726846372, -1611013491, 204107194, 1605165582, -566891128,
				2082852116, 532995238, -1502590712, 2136989777, -2031153343, 371398938, -1907397429, 342796391,
				609166045, -2007448660, -1096076344, -323570318, -2082980371, 2129956379, -243553361, -1549960929,
				1502383415, -1394618779, 694799815, 78595689, -1439173023, -1416578800, 685225786, -333502212,
				-1181308536, -380569313, 772035354, -915266376, 663709718, 1443496021, -777017729, -883300731,
				-387828385, 1907473488, -725483724, -972961871, -1255712537, 383120918, 1383877998, 1722751914,
				-1156050682, 1952527902, -560244497, 1304305692, 1173974542, -1313227247, -201476579, -298899493,
				-1828496581, -1724396350, 1933643204, 1531804925, 1728655262, -955565449, -69843702, -461760848,
				268336768, 1446130876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

//		for (int i = 0; i < test1.length; i++) {
//			if (test1[i] != test2[i]) {
//				System.out.println(test1[i] + " !=" + test2[i]);
//			}
//		}

		MoveZeroes mz = new MoveZeroes();
		mz.moveZeroes(nums);
		for (int n : nums) {
			System.out.print(n + " ");
		}

	}

	// Loop through nums, if nums[i] is non-zero, replace the leftmost 
	// zero element nums[j] with nums[i] and set nums[i] to zero if i > j. 
	// Note that i == j happens when nums has leading non-zero 
	// elements, nums = {2, 1, 3, 0, 5, 0, 6}. In this case, we don't perform
	// any swap and keep incrementing i and j until i > j.

	public void moveZeroes(int[] nums) {
	    int j = 0; // The index of the leftmost zero in nums.
	    for(int i = 0; i < nums.length; i++){
	        if(nums[i] != 0){
	            if(i > j){ // i can only be larger than or equal to j.
	                nums[j] = nums[i];
	                nums[i] = 0;
	            }
	            j++;
	        }
	    }
	}
	
	
	// pass 18/21 test cases
	public void moveZeroes_failed(int[] nums) {
		if (nums == null || nums.length == 0)
			return;

		int left = 0, right = 1;
		while (left < right && right < nums.length) {
			if (nums[left] != 0 && right < nums.length - 1) {
				left++;
				right++;
			}

			if (right < nums.length - 1 && nums[right] == 0)
				right++;

			if (nums[left] == 0 && nums[right] != 0) {
				swap(nums, left, right);
				left++;
				right++;
			}

			if (right == nums.length - 1) {
				if (nums[right] != 0 && nums[left] == 0) {
					swap(nums, left, right);
				}
				return;
			}

		}
	}

	public void swap(int[] nums, int a, int b) {
		int temp = nums[a];
		nums[a] = nums[b];
		nums[b] = temp;
	}
}
